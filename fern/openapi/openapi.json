{
  "openapi": "3.0.1",
  "info": {
    "title": "Public Projects API",
    "description": "Public API for modifying tasks and projects.",
    "contact": {
      "name": "ProjectManager.com, Inc",
      "url": "https://www.projectmanager.com/contact",
      "email": "support@projectmanager.com"
    },
    "version": "11.1.1386.0"
  },
  "paths": {
    "/project-api/public/changesets/{changeSetId}": {
      "get": {
        "tags": [
          "Changeset"
        ],
        "summary": "Retrieve Changeset",
        "description": "Retrieve a Changeset by its unique ID.\r\n            \r\nA Changeset is an individual edit that has been made to a project.  Since multiple users can\r\nedit a project at the same time, individual Changesets are applied in a sequential fashion. If\r\na Changeset causes a conflict or cannot be applied, it will be rejected.  You can examine a\r\nChangeset to determine its conflict resolution status.\r\n            \r\nWhen checking the status of a Changeset, you can call either RetrieveChangeset or\r\nRetrieveCompletedChangeset.  Using RetrieveChangeset will give you the immediate status of the\r\nChangeset.  Using RetrieveCompletedChangeset will delay the response until the Changeset has\r\nfinished processing.",
        "parameters": [
          {
            "name": "changeSetId",
            "in": "path",
            "description": "The unique ID number of the Changeset to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/changesets/{changeSetId}/poll": {
      "get": {
        "tags": [
          "Changeset"
        ],
        "summary": "Retrieve Completed Changeset",
        "description": "Retrieve a Changeset by its unique ID. This endpoint waits for the Changeset to complete its\r\nprocessing prior to returning a result.\r\n            \r\nA Changeset is an individual edit that has been made to a project.  Since multiple users can\r\nedit a project at the same time, individual Changesets are applied in a sequential fashion. If\r\na Changeset causes a conflict or cannot be applied, it will be rejected.  You can examine a\r\nChangeset to determine its conflict resolution status.\r\n            \r\nWhen checking the status of a Changeset, you can call either RetrieveChangeset or\r\nRetrieveCompletedChangeset.  Using RetrieveChangeset will give you the immediate status of the\r\nChangeset.  Using RetrieveCompletedChangeset will delay the response until the Changeset has\r\nfinished processing.\r\n            \r\nAlthough most Changesets complete instantly, some Changesets may need additional time to\r\ncomplete.  If the Changeset cannot be processed within a reasonable length of time, this API\r\ncall may fail.  If this API fails, it will return a status error indicating the Changeset is\r\nstill being processed.",
        "parameters": [
          {
            "name": "changeSetId",
            "in": "path",
            "description": "The unique ID number of the Changeset to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesetGetResponseDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/{taskId}/discussions": {
      "post": {
        "tags": [
          "Discussion"
        ],
        "summary": "Create Task Comments",
        "description": "Adds a Markdown-formatted comment to a task.\r\n            \r\nTasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique ID number of the task being commented upon",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The Markdown-formatted text of the comment",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DiscussionCreateDto"
                  }
                ],
                "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionCreateResponseDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Query Projects",
        "description": "Retrieve a list of Projects that match an [OData formatted query](https://www.odata.org/).\r\n            \r\nA Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project.",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the given number of records and then returns $top records",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter the expression according to oData queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specify which properties should be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Order collection by this field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Include related data in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoListAstroResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create Project",
        "description": "Create a new project based on the details provided.\r\n            \r\nA Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project.",
        "requestBody": {
          "description": "Information about the Project you wish to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCreateRequestDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponseDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieve Project",
        "description": "Retrieves a project based on its unique identifier.\r\n            \r\nA Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update Project",
        "description": "Update an existing Project and replace the values of fields specified.\r\n            \r\nA Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project.\r\n            \r\nMultiple users can be working on data at the same time.  When you call an API to update an\r\nobject, this call is converted into a Changeset that is then applied sequentially.  You can use\r\nRetrieveChangeset to see the status of an individual Changeset.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "All non-null fields in this object will replace previous data within the Project",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectUpdateDto"
                  }
                ],
                "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/chargecodes": {
      "get": {
        "tags": [
          "ProjectChargeCode"
        ],
        "summary": "Retrieve Charge Codes",
        "description": "Retrieve all defined ChargeCodes that can be used when creating Tasks.\r\n            \r\nA ChargeCode is a code used to identify costs within your Projects.  Each ChargeCode has\r\na name and a unique identifier.  ChargeCodes are defined per Workspace and are shared\r\namong Projects.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectChargeCodeDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/customers": {
      "get": {
        "tags": [
          "ProjectCustomer"
        ],
        "summary": "Retrieve Project Customers",
        "description": "Retrieves all ProjectCustomers defined within your Workspace.\r\n            \r\nA ProjectCustomer is a code used to identify costs within your Projects.  Each\r\nProjectCustomer has a name and a unique identifier.  ChargeCodes are defined per\r\nWorkspace and are shared among Projects.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCustomerDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/fields": {
      "get": {
        "tags": [
          "ProjectField"
        ],
        "summary": "Retrieve Project Fields",
        "description": "Retrieves all ProjectFields defined within your Workspace.\r\n            \r\nA ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectFieldsResponseDtoListAstroResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectField"
        ],
        "summary": "Create Project Field",
        "description": "Creates a new ProjectField within your Workspace.\r\n            \r\nA ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace.",
        "requestBody": {
          "description": "Information about the ProjectField to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectFieldResponseDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectField"
        ],
        "summary": "Delete Project Field",
        "description": "Deletes an existing ProjectField within your Workspace.\r\n            \r\nA ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace.",
        "requestBody": {
          "description": "The identity of the ProjectField to delete",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DeleteProjectFieldDto"
                  }
                ],
                "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}/fields/{fieldId}": {
      "put": {
        "tags": [
          "ProjectField"
        ],
        "summary": "Update Project Field",
        "description": "Updates an existing ProjectField with new information.\r\n            \r\nA ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project that contains this ProjectField",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The unique identifier of this ProjectField",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new information for this ProjectField",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateProjectFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a ProjectField."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/project-folders": {
      "get": {
        "tags": [
          "ProjectFolder"
        ],
        "summary": "Retrieve Project Folders",
        "description": "Retrieves all ProjectFolders defined within your Workspace.\r\n            \r\nA ProjectFolder is a named storage location that can contain Projects.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFolderDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/priorities": {
      "get": {
        "tags": [
          "ProjectPriority"
        ],
        "summary": "Retrieve Project Priorities",
        "description": "Retrieves all ProjectPriorities defined within your Workspace.\r\n            \r\nA ProjectPriority is a named priority level used by your business to determine how to decide\r\nwhich Tasks are the most important.  You can name your ProjectPriority levels anything you like\r\nand you can reorganize the order of the ProjectPriority levels at any time.\r\n            \r\nNote that TaskPriority and ProjectPriority are different classes of priority levels.  Even\r\nif they may have similar names, they are different objects and must be tracked separately.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPriorityDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/statuses": {
      "get": {
        "tags": [
          "ProjectStatus"
        ],
        "summary": "Retrieve Project Statuses",
        "description": "Retrieves all ProjectStatuses defined within your Workspace.\r\n            \r\nA ProjectStatus is a named condition used by your business to categorize the completion level\r\nof Tasks and Projects within your Workspace.  You can name your ProjectStatus levels anything\r\nyou like and you can reorganize the order of the ProjectPriority levels at any time.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectStatusDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/templates": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieve Project Templates",
        "description": "Retrieves all ProjectTemplates defined in the system.\r\n            \r\nA ProjectTemplate is a definition of default project related data (eg. Tasks) that can be applied\r\nto a new project when it is created.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/resources": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create Resource",
        "description": "Create a new Resource within your Workspace.\r\n            \r\nA Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user.",
        "requestBody": {
          "description": "The details for the new Resource to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceCreateDto"
                  }
                ],
                "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Query Resources",
        "description": "Retrieve a list of Resources that match an [OData formatted query](https://www.odata.org/).\r\n            \r\nA Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user.",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the given number of records and then returns $top records",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter the expression according to oData queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specify which properties should be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Order collection by this field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Include related data in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/resources/skills": {
      "get": {
        "tags": [
          "ResourceSkill"
        ],
        "summary": "Retrieve Resource Skills",
        "description": "Retrieves all ResourceSkills defined within your Workspace.\r\n            \r\nA ResourceSkill is a capability possessed by a Resource that can be used to distinguish\r\ndifferent classes of Resources suitable for use by a Task.  You can specify that a Task\r\nrequires a Resource with a particular set of ResourceSkills and then allocate Resources\r\nbased on whether or not they have the suitable ResourceSkills.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessSkillDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/resources/teams": {
      "get": {
        "tags": [
          "ResourceTeam"
        ],
        "summary": "Retrieve Resource Teams",
        "description": "Retrieves all ResourceTeams defined within your Workspace.\r\n            \r\nA ResourceTeam is a grouping of Resources that allows you to keep track of assignments\r\nin a manner consistent with your business needs.  You can assign Resources to be members\r\nof zero, one, or many ResourceTeams.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTeamDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tags": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Query Tags",
        "description": "Retrieve a list of Tags that match an [OData formatted query](https://www.odata.org/).\r\n            \r\nA Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color.",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the given number of records and then returns $top records",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter the expression according to oData queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specify which properties should be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Order collection by this field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Include related data in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoListAstroResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Create Tag",
        "description": "Creates a new Tag based on information you provide.\r\n            \r\nA Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color.",
        "requestBody": {
          "description": "The information for the new Tag to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagCreateDto"
                  }
                ],
                "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Query Tasks",
        "description": "Retrieve a list of Tasks that match an [OData formatted query](https://www.odata.org/).\r\n            \r\nA Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the given number of records and then returns $top records",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter the expression according to oData queries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Specify which properties should be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Order collection by this field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Include related data in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/{taskId}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieve Task",
        "description": "Retrieve a Task by its unique identifier or by its short ID.  A Task has both a unique\r\nidentifier, which is a GUID, and a short ID, which is a small text label that is unique\r\nonly within your Workspace.\r\n            \r\nA Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier or short ID of the Task to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDetailsDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Update Task",
        "description": "Update an existing Task and replace the values of fields specified.\r\n            \r\nA Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.\r\n            \r\nMultiple users can be working on data at the same time.  When you call an API to update an\r\nobject, this call is converted into a Changeset that is then applied sequentially.  You can use\r\nRetrieveChangeset to see the status of an individual Changeset.\r\n            \r\nKnown Issues:  This API returns an error if your Update call includes too many changes in a\r\nsingle API call.  Please restrict usage to one change per API request.  This API will be\r\ndeprecated and replaced with an improved API call in a future release.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "All non-null fields in this object will replace existing data in the Task",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Delete Task",
        "description": "Delete an existing Task.\r\n            \r\nA Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.\r\n            \r\nMultiple users can be working on data at the same time.  When you call an API to update an\r\nobject, this call is converted into a Changeset that is then applied sequentially.  You can use\r\nRetrieveChangeset to see the status of an individual Changeset.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Unique identifier of the Task to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}/tasks": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create Task",
        "description": "Create a new Task within a specified project.\r\n            \r\nA Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project that will contain this Task",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new Task to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCreateDto"
                  }
                ],
                "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/priorities": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieve Task Priorities",
        "description": "Retrieves all TaskPriorities defined within your Workspace.\r\n            \r\nA TaskPriority is a named priority level used by your business to determine how to decide\r\nwhich Tasks are the most important.  You can name your TaskPriority levels anything you like\r\nand you can reorganize the order of the TaskPriority levels at any time.\r\n            \r\nNote that TaskPriority and ProjectPriority are different classes of priority levels.  Even\r\nif they may have similar names, they are different objects and must be tracked separately.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPriorityDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}/tasks/bulk": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create Many Tasks",
        "description": "Create multiple new Tasks within a specified project with a single API call.\r\n            \r\nA Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project that will contain these Tasks",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The list of new Tasks to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkTaskCreateDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/{taskId}/assignees": {
      "post": {
        "tags": [
          "TaskAssignee"
        ],
        "summary": "Replace Task Assignees",
        "description": "Replace all TaskAssignees on a Task with new TaskAssignees.\r\n            \r\nA TaskAssignee is an assignment of a Resource to a Task.  You can assign multiple Resources\r\nto a Task and designate what proportion of their time will be allocated to this Task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task whose TaskAssignees will be replaced",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new list of TaskAssignees for this Task",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaskAssignee"
        ],
        "summary": "Create Or Update TaskAssignee",
        "description": "Adds or updates a TaskAssignee to a Task.  If the TaskAssignee is already assigned to the Task, update\r\ntheir allocation.  If the TaskAssignee is not yet assigned to the Task, assign them and set their\r\nallocation level to the correct amount.\r\n            \r\nA TaskAssignee is an assignment of a Resource to a Task.  You can assign multiple Resources\r\nto a Task and designate what proportion of their time will be allocated to this Task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task to add or update an assignment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of Assignee data",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssigneeUpsertDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaskAssignee"
        ],
        "summary": "Delete Task Assignees",
        "description": "Remove one or more TaskAssignees from a Task.\r\n            \r\nA TaskAssignee is an assignment of a Resource to a Task.  You can assign multiple Resources\r\nto a Task and designate what proportion of their time will be allocated to this Task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task whose TaskAssignee will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of TaskAssignee records to remove",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}/tasks/fields": {
      "get": {
        "tags": [
          "TaskField"
        ],
        "summary": "Retrieve Task Fields",
        "description": "Retrieves all TaskFields defined for a specific Project within your Workspace.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project to retrieve TaskFields",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskFieldsResponseDtoListAstroResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskField"
        ],
        "summary": "Create Task Field",
        "description": "Creates a new TaskFields for a specific Project within your Workspace.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project within which to create this TaskField",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Information about the TaskField to create",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaskFieldRequestDto"
                  }
                ],
                "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}/tasks/fields/{fieldId}": {
      "delete": {
        "tags": [
          "TaskField"
        ],
        "summary": "Delete Task Field",
        "description": "Deletes a TaskField for a specific Project within your Workspace.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project that contains this TaskField",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The unique identifier of the TaskField to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/{taskId}/fields/{fieldId}": {
      "get": {
        "tags": [
          "TaskField"
        ],
        "summary": "Retrieve TaskField Value",
        "description": "Retrieves the current TaskField value for a particular Task and TaskField.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task of the value to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The unique identifier of the TaskField of the value to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaskField"
        ],
        "summary": "Update TaskField Value",
        "description": "Replaces the current value of a TaskFields for a specific Task within your Workspace.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task whose value you wish to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "The unique identifier of the TaskField whose value you wish to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new value for this TaskField for this Task",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTaskFieldValueDto"
                  }
                ],
                "description": "A model that contains a new value to be set for a TaskField."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/{taskId}/fields": {
      "get": {
        "tags": [
          "TaskField"
        ],
        "summary": "Retrieve All TaskField Values",
        "description": "Retrieves all TaskField values for a particular Task.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task for which we want TaskField values",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFieldsValueResponseDtoListAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/projects/{projectId}/tasks/statuses": {
      "get": {
        "tags": [
          "TaskStatus"
        ],
        "summary": "Retrieve Task Statuses",
        "description": "Retrieves the list of TaskStatus levels for a specific Project within your Workspace.\r\n            \r\nA TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project to retrieve TaskStatuses",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoListAstroResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskStatus"
        ],
        "summary": "Create TaskStatus",
        "description": "Creates a new TaskStatus level for a specific Project within your Workspace.\r\n            \r\nA TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the Project for the new TaskStatus",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Information about the new TaskStatus level to create within this Project",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/xml": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "text/plain": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskStatusCreateDto"
                  }
                ],
                "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    },
    "/project-api/public/tasks/{taskId}/tags": {
      "post": {
        "tags": [
          "TaskTag"
        ],
        "summary": "Replace TaskTags",
        "description": "Replaces the existing TaskTags on a Task with a newly provided list of TaskTags.\r\n            \r\nA TaskTag is a connection between a Task and a Tag.  Each Task can have zero, one or many\r\nTaskTags associated with it.  TaskTags can be assigned and removed from the Task to help you\r\nclassify your Tasks and prioritize work.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task for which we will replace TaskTags",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The replacement list of TaskTags for this Task",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaskTag"
        ],
        "summary": "Add TaskTag to Task",
        "description": "Add one or more new TaskTags to a Task.\r\n            \r\nA TaskTag is a connection between a Task and a Tag.  Each Task can have zero, one or many\r\nTaskTags associated with it.  TaskTags can be assigned and removed from the Task to help you\r\nclassify your Tasks and prioritize work.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task for which we will add TaskTags",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new TaskTags to add to this Task",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaskTag"
        ],
        "summary": "Remove TaskTag from Task",
        "description": "Removes one or more existing TaskTags from a Task.\r\n            \r\nA TaskTag is a connection between a Task and a Tag.  Each Task can have zero, one or many\r\nTaskTags associated with it.  TaskTags can be assigned and removed from the Task to help you\r\nclassify your Tasks and prioritize work.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The unique identifier of the Task for which we will remove existing TaskTags",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The TaskTags to remove from this Task",
          "content": {
            "application/json;odata.metadata=minimal;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=minimal;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=minimal": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=full": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.metadata=none": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.streaming=true": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json;odata.streaming=false": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NameDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetStatusDtoAstroResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AssigneeUpsertDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the TaskAssignee to which work is being assigned.",
            "format": "uuid"
          },
          "assignedEffort": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The new amount of effort to assign for this Resource.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "An AssigneeUpsert is a create-or-update process that will either create\r\na new assignment of effort to a TaskAssignee or update an existing effort\r\namount for an existing TaskAssignee."
      },
      "AstroError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A description of the error that occurred.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an error that occurred within the ProjectManager API."
      },
      "AstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nUse the `Success` value to determine if the API call succeeded.  If the API call failed, you can\r\nexamine the `Error` value to determine what went wrong."
      },
      "BulkTaskCreateDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the Task being created."
          },
          "description": {
            "type": "string",
            "description": "A description of the work involved in this Task.",
            "nullable": true
          },
          "percentComplete": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The numerical percentage, from 0-100, representing the percentage completion\r\nfor this Task.  Any numbers below zero or above 100 will be clamped to the\r\nminimum or maximum value.\r\n            \r\nThis value can be edited manually in the Gantt chart view of the application,\r\nor can be selected on the Task Detail page within the Kanban board.",
            "format": "int32",
            "nullable": true
          },
          "statusId": {
            "type": "string",
            "description": "The unique identifier of the TaskStatus that reflects the current status of\r\nthis Task, if known.",
            "format": "uuid",
            "nullable": true
          },
          "priorityId": {
            "type": "integer",
            "description": "The unique identifier of the TaskPriority that reflects the current status of\r\nthis Task, if that has been selected.",
            "format": "int32",
            "nullable": true
          },
          "plannedStartDate": {
            "type": "string",
            "description": "The date when work on this Task is planned to begin.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "plannedFinishDate": {
            "type": "string",
            "description": "The date when work on this Task is expected to complete.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "actualStartDate": {
            "type": "string",
            "description": "If set, this is the actual date when work began on the Task.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "You can create a large number of Tasks rapidly using the BulkTaskCreate API.  With\r\nthis API you can submit multiple Tasks for creation at the same time.  This API\r\nprovides access to a subset of Task information; for full control over Task creation\r\nplease use the normal Create Task API."
      },
      "BusinessSkillDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ResourceSkill",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The friendly name of this ResourceSkill",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ResourceSkill is a capability possessed by a Resource that can be used to distinguish\r\ndifferent classes of Resources suitable for use by a Task.  You can specify that a Task\r\nrequires a Resource with a particular set of ResourceSkills and then allocate Resources\r\nbased on whether or not they have the suitable ResourceSkills."
      },
      "BusinessSkillDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessSkillDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "BusinessTeamDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ResourceTeam",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The friendly name of this ResourceTeam",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ResourceTeam is a grouping of Resources that allows you to keep track of assignments\r\nin a manner consistent with your business needs.  You can assign Resources to be members\r\nof zero, one, or many ResourceTeams."
      },
      "BusinessTeamDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessTeamDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ChangeSetStatusDto": {
        "type": "object",
        "properties": {
          "changeSetId": {
            "type": "string",
            "description": "The unique identifier of this Changeset",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the entity affected by this Changeset.  For example, if this\r\nChangeset was created for a Task, this value will be the unique identifier for the Task.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Returns the id of a specific ChangeSet"
      },
      "ChangeSetStatusDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChangeSetStatusDto"
              }
            ],
            "description": "Returns the id of a specific ChangeSet",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ChangeSetStatusDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeSetStatusDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ChangesetGetResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Changeset.",
            "format": "uuid"
          },
          "success": {
            "type": "boolean",
            "description": "True if this Changeset was successfully applied.  If the Changeset has not been applied,\r\nthis value is null.",
            "nullable": true
          },
          "state": {
            "enum": [
              "NotStarted",
              "InProgress",
              "Success",
              "Fail"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ],
            "description": "A status flag that indicates the progress of the Changeset through resolution."
          }
        },
        "additionalProperties": false,
        "description": "A Changeset is an individual edit that has been made to a project.  Since multiple users can\r\nedit a project at the same time, individual Changesets are applied in a sequential fashion. If\r\na Changeset causes a conflict or cannot be applied, it will be rejected.  You can examine a\r\nChangeset to determine its conflict resolution status."
      },
      "ChangesetGetResponseDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChangesetGetResponseDto"
              }
            ],
            "description": "A Changeset is an individual edit that has been made to a project.  Since multiple users can\r\nedit a project at the same time, individual Changesets are applied in a sequential fashion. If\r\na Changeset causes a conflict or cannot be applied, it will be rejected.  You can examine a\r\nChangeset to determine its conflict resolution status.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "CreateProjectFieldDto": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of this Field"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the Field.  Valid types are the following:\r\n* Text\r\n* Number\r\n* Date\r\n* Currency\r\n* Dropdown\r\n            \r\nAttempting to create a field with any Type other than these will\r\nreturn an error.\r\n            \r\nFor Dropdown Field, specify the list of choices in the `Options`\r\nfield.\r\nTODO - This object needs to support a list of options, in case dropdown is selected"
          }
        },
        "additionalProperties": false,
        "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
      },
      "CreateProjectFieldResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Field",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this Field",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
      },
      "CreateProjectFieldResponseDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateProjectFieldResponseDto"
              }
            ],
            "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "CreateTaskFieldRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the TaskField",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of this TaskField.  Valid types are the following:\r\n* Text\r\n* Number\r\n* Date\r\n* Checkbox\r\n* Currency\r\n* Dropdown",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
      },
      "DeleteProjectFieldDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the ProjectField being deleted",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the ProjectField being deleted",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace."
      },
      "DiscussionCreateDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text of the comment to add to the discussion, in Markdown format.\r\n            \r\nDiscussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
      },
      "DiscussionCreateResponseDto": {
        "type": "object",
        "properties": {
          "discussionCommentId": {
            "type": "string",
            "description": "The unique identifier of the discussion comment created.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges."
      },
      "DiscussionCreateResponseDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscussionCreateResponseDto"
              }
            ],
            "description": "Tasks can have discussions attached to them.  These discussions can include text with simple\r\nformatting.  Discussion comments are formatted using [Markdown](https://www.markdownguide.org/)\r\nand users should be aware that HTML embedding is not permitted due to the risk of cross-site\r\nattacks and other embedding challenges.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "GetProjectFieldsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Field",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this Field",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the Field.  Valid types are the following:\r\n* Text\r\n* Number\r\n* Date\r\n* Currency\r\n* Dropdown\r\n            \r\nAttempting to create a field with any Type other than these will\r\nreturn an error.\r\n            \r\nFor Dropdown Field, specify the list of choices in the `Options`\r\nfield.",
            "nullable": true
          },
          "entityType": {
            "type": "string",
            "description": "The entity type of the Field, either `projects` or `tasks`.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of options for use of this Field.  This is only valid if\r\nthe `Type` value is set to `Dropdown`.\r\n            \r\nWhen a custom Field of type `DropDown` is shown to a user in the\r\napplication, they will be able to choose one of the `Options` in this\r\nlist.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents either a ProjectField or a TaskField, depending on the value of the\r\n`EntityType` for this object.\r\n            \r\nA ProjectField is a custom field defined within your Workspace.  You can define ProjectFields\r\nfor any integration purpose that is important to your business.  Each ProjectField has a data\r\ntype as well as options in how it is handled.  ProjectFields can be edited for each Project\r\nwithin your Workspace.\r\n            \r\nA TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
      },
      "GetProjectFieldsResponseDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetProjectFieldsResponseDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "GetTaskFieldsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskField",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this TaskField",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of this TaskField.  Valid types are the following:\r\n* Text\r\n* Number\r\n* Date\r\n* Checkbox\r\n* Currency\r\n* Dropdown\r\n            \r\nAttempting to create a field with any Type other than these will\r\nreturn an error.\r\n            \r\nFor Dropdown TaskFields, specify the list of choices in the `Options`\r\nfield.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of options for use of this TaskField.  This is only valid if\r\nthe `Type` value is set to `Dropdown`.\r\n            \r\nWhen a custom TaskField of type `DropDown` is shown to a user in the\r\napplication, they will be able to choose one of the `Options` in this\r\nlist.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
      },
      "GetTaskFieldsResponseDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTaskFieldsResponseDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "HttpStatusCode": {
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "Processing",
          "EarlyHints",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultiStatus",
          "AlreadyReported",
          "IMUsed",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "PermanentRedirect",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "MisdirectedRequest",
          "UnprocessableEntity",
          "Locked",
          "FailedDependency",
          "UpgradeRequired",
          "PreconditionRequired",
          "TooManyRequests",
          "RequestHeaderFieldsTooLarge",
          "UnavailableForLegalReasons",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported",
          "VariantAlsoNegotiates",
          "InsufficientStorage",
          "LoopDetected",
          "NotExtended",
          "NetworkAuthenticationRequired"
        ],
        "type": "string"
      },
      "IdDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier.  To determine the meaning of this unique identifier,\r\nsee the field to which this value is attached.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "When uploading a list of unique identifiers to the API, this data structure\r\nrepresents one individual unique identifier within the list."
      },
      "NameDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "A name.  To determine the meaning of this name, see the field to which this\r\nvalue is attached in the parent object."
          }
        },
        "additionalProperties": false,
        "description": "When uploading a list of names to an API, this data structure represents an\r\nindividual name within the list."
      },
      "ProjectChargeCodeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ChargeCode",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ChargeCode",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ChargeCode is a code used to identify costs within your Projects.  Each ChargeCode has\r\na name and a unique identifier.  ChargeCodes are defined per Workspace and are shared\r\namong Projects."
      },
      "ProjectChargeCodeDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectChargeCodeDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectCreateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Project.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "An optional description of the Project",
            "nullable": true
          },
          "folderId": {
            "type": "string",
            "description": "The unique identifier of the folder of this project, or null if not assigned.",
            "format": "uuid",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberDto"
            },
            "description": "If you wish to grant access to this Project to a selected list of people during creation,\r\nprovide a list of ProjectMembers here.  If you do not specify anyone, this Project will\r\nbe available to only yourself.",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "The unique identifier of the customer for this project, or null if not customer specific",
            "format": "uuid",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "description": "The unique identifier of the manager of this project, or null if not assigned.",
            "format": "uuid",
            "nullable": true
          },
          "chargeCodeId": {
            "type": "string",
            "description": "The unique identifier of the ChargeCode for this Project, if one has been selected.",
            "format": "uuid",
            "nullable": true
          },
          "statusId": {
            "type": "string",
            "description": "The ProjectStatus chosen for this Project, if one has been selected.",
            "format": "uuid",
            "nullable": true
          },
          "priorityId": {
            "type": "string",
            "description": "The ProjectPriority level of this Project, if one has been selected.",
            "format": "uuid",
            "nullable": true
          },
          "hourlyRate": {
            "type": "number",
            "description": "The default hourly rate for work on this Project.  This rate will be used\r\nif an assignee working on this Project does not have an hourly rate configured\r\nin their profile.",
            "format": "double",
            "nullable": true
          },
          "budget": {
            "type": "number",
            "description": "The proposed budget for this Project.",
            "format": "double",
            "nullable": true
          },
          "statusUpdate": {
            "type": "string",
            "description": "Contains an optional status update for Projects that can be used to summarize\r\nthe status of multiple Projects at a glance.\r\n            \r\nYou can edit the StatusUpdate field on the Portfolio page of the application.",
            "nullable": true
          },
          "template": {
            "type": "boolean",
            "description": "True if this Project is a template that will be reused as a framework\r\nfor future Projects.\r\n            \r\nYou can save a Project as a template and reuse it in the future for creating\r\nadditional Projects.  If this Project is a template, set this to `true` and this\r\ntemplate will be available to choose from when creating a new Project within the\r\napplication."
          }
        },
        "additionalProperties": false,
        "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
      },
      "ProjectCreateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the project of this project, or null if not assigned.",
            "format": "uuid"
          },
          "shortId": {
            "type": "string",
            "description": "The unique identifier of the shortid of this project, or null if not assigned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
      },
      "ProjectCreateResponseDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectCreateResponseDto"
              }
            ],
            "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectCustomerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ProjectCustomer",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ProjectCustomer",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectCustomer is a code used to identify costs within your Projects.  Each\r\nProjectCustomer has a name and a unique identifier.  ChargeCodes are defined per\r\nWorkspace and are shared among Projects."
      },
      "ProjectCustomerDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectCustomerDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the Project.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the Project.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "An optional description of the Project",
            "nullable": true
          },
          "shortCode": {
            "type": "string",
            "description": "A shortened name that will be used when reporting on Projects.  This short\r\nname can be edited in the Project Settings page within the application\r\nand can be any text you wish.",
            "nullable": true
          },
          "shortId": {
            "type": "string",
            "description": "A short identifier that uniquely identifies this Project within your Workspace\r\nusing a single letter followed by a number.  This code can be used for APIs\r\nthat accept Project unique identifiers.\r\n            \r\nYou can observe the short ID within the application by observing the URL of\r\nthe page you visit when you click on this project.  The page's URL will appear\r\nin the form `https://pm.app.projectmanager.com/project/board/D16` - in this\r\nexample, the `ShortId` is `D16`.\r\n            \r\nThis code is automatically assigned for you and cannot be changed.",
            "nullable": true
          },
          "folder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectFolderDto"
              }
            ],
            "description": "If this Project is grouped within a ProjectFolder, this contains the ProjectFolder information.",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicProjectStatusDto"
              }
            ],
            "description": "The ProjectStatus chosen for this Project.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "The earliest planned or actual start date of tasks on the project.\r\n            \r\nThis field is calculated automatically and cannot be changed.",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The latest planned or actual finish date of tasks on the project.\r\n            \r\nThis field is calculated automatically and cannot be changed.",
            "format": "date-time",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "description": "The target planned completion date for this Project, or null if one has\r\nnot been selected.  This value can be updated in the Project Settings\r\npage or the Portfolio Project page within the application.",
            "format": "date",
            "nullable": true
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectPriorityDto"
              }
            ],
            "description": "The ProjectPriority level of this Project, if defined.",
            "nullable": true
          },
          "chargeCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectChargeCodeDto"
              }
            ],
            "description": "The ChargeCode of this Project, if defined.",
            "nullable": true
          },
          "manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectManagerDto"
              }
            ],
            "description": "Information about the manager of this project, if one has been assigned.",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectCustomerDto"
              }
            ],
            "description": "Information about the manager of this project, if one has been specified.",
            "nullable": true
          },
          "budget": {
            "type": "number",
            "description": "The proposed budget for this Project.",
            "format": "double",
            "nullable": true
          },
          "hourlyRate": {
            "type": "number",
            "description": "The default hourly rate for work on this Project.  This rate will be used\r\nif an assignee working on this Project does not have an hourly rate configured\r\nin their profile.",
            "format": "double",
            "nullable": true
          },
          "statusUpdate": {
            "type": "string",
            "description": "Contains an optional status update for Projects that can be used to summarize\r\nthe status of multiple Projects at a glance.\r\n            \r\nYou can edit the StatusUpdate field on the Portfolio page of the application.",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "The timestamp in UTC when the Project was most recently modified.",
            "format": "date-time"
          },
          "createDate": {
            "type": "string",
            "description": "The timestamp in UTC when the Project was created.",
            "format": "date-time"
          },
          "isTemplate": {
            "type": "boolean",
            "description": "True if this Project is a template that will be reused as a framework\r\nfor future Projects."
          }
        },
        "additionalProperties": false,
        "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
      },
      "ProjectDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectDto"
              }
            ],
            "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectFolderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ProjectFolder.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ProjectFolder.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectFolder is a named storage location that can contain Projects."
      },
      "ProjectFolderDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectFolderDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectManagerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ProjectManager",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ProjectManager",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectManager is a person who manages a Project."
      },
      "ProjectMemberDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The unique identifier of the user of this ProjectMember.",
            "format": "uuid"
          },
          "memberType": {
            "type": "string",
            "description": "The name of this membertype",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectMember is a user who can collaborate on a Project.  You can control\r\npermissions for what each ProjectMember can do and how they can interact with\r\nthe Project using this model."
      },
      "ProjectPriorityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ProjectPriority.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ProjectPriority.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectPriority is a named priority level used by your business to determine how to decide\r\nwhich Tasks are the most important.  You can name your ProjectPriority levels anything you like\r\nand you can reorganize the order of the ProjectPriority levels at any time."
      },
      "ProjectPriorityDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectPriorityDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectTemplateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ProjectTemplate.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ProjectTemplate.\r\n            \r\nName can de used as a unique text reference for Project Templates.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title of this ProjectTemplate.\r\n            \r\nTitle can be used as a description text for Project Templates.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectTemplate is a named document that contains default Project details.\r\n            \r\nProject Templates are defined for the system and are shared among Projects."
      },
      "ProjectTemplateDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTemplateDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ProjectUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Project.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "An optional description of the Project",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "description": "The target planned completion date for this Project, or null if one has\r\nnot been selected.  This value can be updated in the Project Settings\r\npage or the Portfolio Project page within the application.",
            "format": "date",
            "nullable": true
          },
          "folderId": {
            "type": "string",
            "description": "To move this Project into a ProjectFolder, set this to the unique identifier of the\r\nProjectFolder.",
            "format": "uuid",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "To assign this Project to a ProjectCustomer, set this to the unique identifier of the\r\nProjectCustomer.",
            "format": "uuid",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "description": "To assign this Project to a ProjectManager, set this to the unique identifier of the\r\nProjectManager.",
            "format": "uuid",
            "nullable": true
          },
          "chargeCodeId": {
            "type": "string",
            "description": "To set the ChargeCode for this Project, set this to the unique identifier of the\r\nChargeCode to use for this Project.",
            "format": "uuid",
            "nullable": true
          },
          "statusId": {
            "type": "string",
            "description": "To change the ProjectStatus of this Project, set this to the unique identifier of the\r\nProjectStatus.",
            "format": "uuid",
            "nullable": true
          },
          "priorityId": {
            "type": "string",
            "description": "To change the ProjectPriority of this Project, set this to the unique identifier of the\r\nProjectPriority.",
            "format": "uuid",
            "nullable": true
          },
          "hourlyRate": {
            "type": "number",
            "description": "To change the hourly rate of this Project, set this to the new amount.",
            "format": "double",
            "nullable": true
          },
          "budget": {
            "type": "number",
            "description": "To change the budget of this Project, set this to the new amount.",
            "format": "double",
            "nullable": true
          },
          "statusUpdate": {
            "type": "string",
            "description": "To update the Project's status text, set this to the new status text.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
      },
      "PublicProjectStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ProjectStatus.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ProjectStatus.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ProjectStatus is a named condition used by your business to categorize the completion level\r\nof Tasks and Projects within your Workspace.  You can name your ProjectStatus levels anything\r\nyou like and you can reorganize the order of the ProjectPriority levels at any time."
      },
      "PublicProjectStatusDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectStatusDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ResourceApproverDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ResourceApprover",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ResourceApprover",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "TODO - What is a ResourceApprover?  Ted's theory is that this is a Workflow stage \"name\"."
      },
      "ResourceCreateDto": {
        "required": [
          "firstName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "minLength": 1,
            "type": "string",
            "description": "The first name of the person Resource.\r\n            \r\nApplies to personnel Resources only."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the person Resource.\r\n            \r\nApplies to personnel Resources only.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email address of this Resource.",
            "nullable": true
          },
          "hourlyRate": {
            "minimum": 0,
            "type": "number",
            "description": "The basic hourly rate for this Resource.",
            "format": "double",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "The phone number associated with this Resource.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city where this Resource is located.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state or region where this Resource is located.  This value is not constrained\r\nto a list of known states or regions.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "A text field indicating the country in which this Resource is located.  This value\r\nis not constrained to the list of known ISO 3166 country names or codes.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Free-form text notes about this Resource.  You may use this field to store extra\r\ninformation about the Resource.",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "The Role privileges associated with this Resource.\r\n            \r\nApplies to personnel Resources only.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of ResourceTeams to which this Resource belongs.",
            "nullable": true
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of ResourceSkills possessed by this Resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
      },
      "ResourceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Resource.",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the person Resource.\r\n            \r\nApplies to personnel Resources only.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the person Resource.\r\n            \r\nApplies to personnel Resources only.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email address of this Resource.",
            "nullable": true
          },
          "hourlyRate": {
            "type": "number",
            "description": "The basic hourly rate for this Resource.",
            "format": "double",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "The phone number associated with this Resource.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city where this Resource is located.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state or region where this Resource is located.  This value is not constrained\r\nto a list of known states or regions.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "A text field indicating the country in which this Resource is located.  This value\r\nis not constrained to the list of known ISO 3166 country names or codes.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Free-form text notes about this Resource.  You may use this field to store extra\r\ninformation about the Resource.",
            "nullable": true
          },
          "approver": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceApproverDto"
              }
            ],
            "description": "The approver who must review all proposed usage of this Resource, if specified.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceTeamDto"
            },
            "description": "The list of ResourceTeams to which this Resource belongs.",
            "nullable": true
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceSkillDto"
            },
            "description": "The list of ResourceSkills possessed by this Resource.",
            "nullable": true
          },
          "onlineDateTime": {
            "type": "string",
            "description": "The last time when this Resource was online.\r\n            \r\nApplies to personnel Resources only.",
            "format": "date-time",
            "nullable": true
          },
          "role": {
            "type": "string",
            "description": "The Role privileges associated with this Resource.\r\n            \r\nApplies to personnel Resources only.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "True if this Resource is currently active and valid.  If this value is false,\r\nthis Resource is considered to be deactivated and not available for further use.\r\n            \r\nFor personnel Resources, setting this value to False will make this user unable\r\nto access this Workspace."
          }
        },
        "additionalProperties": false,
        "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user."
      },
      "ResourceDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceDto"
              }
            ],
            "description": "A Resource represents a person, material, or tool that is used within your Projects.\r\nWhen you attach a Resources to more than one Task, the software will schedule the usage\r\nof your Resource so that it is not allocated to more than one Task at the same time.\r\nThe users in your Workspace are also considered Resources.  To invite a new User to your\r\nWorkspace, create a new Resource for that user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ResourceDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "ResourceSkillDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ResourceSkill",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ResourceSkill",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ResourceSkill is a capability possessed by this Resource that can be used to\r\ndetermine appropriate assignments.  Some Resources may have ResourceSkills that\r\nare in high demand and some Tasks may have a requirement for Resources with particular\r\nResourceSkills."
      },
      "ResourceTeamDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this ResourceTeam",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this ResourceTeam",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A ResourceTeam is a group of Resources that can be referred to as a group.  You can use a\r\nResourceTeam as a shortcut to quickly assign or allocate multiple Resources quickly."
      },
      "State": {
        "enum": [
          "NotStarted",
          "InProgress",
          "Success",
          "Fail"
        ],
        "type": "string"
      },
      "TagCreateDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of this Tag."
          },
          "color": {
            "type": "string",
            "description": "The color that will be used to represent this Tag visually.  This color\r\nis automatically chosen by the application when a user creates a Tag.\r\n            \r\nYou can choose specify any color that can be represented using HTML RGB\r\nsyntax such as `#0088FF`, in the format `RRGGBB`.  You may not use names\r\nfor colors.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Tag.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this Tag.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The color that will be used to represent this Tag visually.  This color\r\nis automatically chosen by the application when a user creates a Tag.\r\n            \r\nYou can choose specify any color that can be represented using HTML RGB\r\nsyntax such as `#0088FF`, in the format `RRGGBB`.  You may not use names\r\nfor colors.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color."
      },
      "TagDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TagDto"
              }
            ],
            "description": "A Tag is a named categorization you can use to distinguish objects from each other.\r\nTags each have a unique identifier, a name, and a color.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TagDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskAssigneeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskAssignee",
            "format": "uuid"
          },
          "initials": {
            "type": "string",
            "description": "A shortened set of initials to use when representing this TaskAssignee visually\r\nin small areas.  The initials may be used in small icons or other overlays.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of this TaskAssignee",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A more complete description of the TaskAssignee.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "True if this TaskAssignee is currently active with the Project."
          },
          "color": {
            "type": "string",
            "description": "The color that will be used to represent this TaskAssignee visually.\r\n            \r\nYou can choose specify any color that can be represented using HTML RGB\r\nsyntax such as `#0088FF`, in the format `RRGGBB`.  You may not use names\r\nfor colors.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first or given name of this TaskAssignee.\r\n            \r\nFor personnel TaskAssignees only.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The last or family name of this TaskAssignee.\r\n            \r\nFor personnel TaskAssignees only.",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "A shortened version of the name of this TaskAssignee.  This is used in areas\r\nwhere the Initials are too short but the full name is too long.",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "description": "A link to an Avatar for this TaskAssignee.  Avatars are small images or representations\r\nthat can be used to visually identify this TaskAssignee at a glance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskAssignee is the person to whom a Task is assigned.  A single Task\r\ncan be assigned to multiple TaskAssignees."
      },
      "TaskCreateDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Task.\r\n            \r\nTODO - Are people allowed to set this when creating a task?  Doesn't that violate\r\nthe principle of GUIDs?",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The common name of this Task."
          },
          "description": {
            "type": "string",
            "description": "A description of the work to be performed in this Task.",
            "nullable": true
          },
          "parentTaskId": {
            "type": "string",
            "description": "If this Task is the child of another Task, set this value to the unique identifier\r\nof the parent Task.",
            "format": "uuid",
            "nullable": true
          },
          "percentComplete": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The numerical percentage, from 0-100, representing the percentage completion\r\nfor this Task.  Any numbers below zero or above 100 will be clamped to the\r\nminimum or maximum value.\r\n            \r\nThis value can be edited manually in the Gantt chart view of the application,\r\nor can be selected on the Task Detail page within the Kanban board.",
            "format": "int32",
            "nullable": true
          },
          "statusId": {
            "type": "string",
            "description": "The unique identifier of the TaskStatus for this Task",
            "format": "uuid",
            "nullable": true
          },
          "priorityId": {
            "type": "integer",
            "description": "A numerical value representing the Priority of this Task",
            "format": "int32",
            "nullable": true
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A list of unique identifiers of TaskAssignees to be assigned to this Task",
            "nullable": true
          },
          "plannedStartDate": {
            "type": "string",
            "description": "The date when work on this Task is planned to begin.",
            "format": "date",
            "nullable": true
          },
          "plannedFinishDate": {
            "type": "string",
            "description": "The date when work on this Task is expected to complete.",
            "format": "date",
            "nullable": true
          },
          "plannedDuration": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The planned duration (in minutes) for this Task.  Cannot be negative.",
            "format": "int32",
            "nullable": true
          },
          "plannedEffort": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The planned effort (in minutes) for this Task.  Cannot be negative.",
            "format": "int32",
            "nullable": true
          },
          "plannedCost": {
            "minimum": 0,
            "type": "number",
            "description": "The planned cost for this Task.  Cannot be negative.",
            "format": "double",
            "nullable": true
          },
          "actualStartDate": {
            "type": "string",
            "description": "The date when work on this Task actually started, if known.",
            "format": "date",
            "nullable": true
          },
          "actualCost": {
            "minimum": 0,
            "type": "number",
            "description": "The actual cost of this Task to date, if known.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
      },
      "TaskDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Task.",
            "format": "uuid"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskProjectDto"
              }
            ],
            "description": "The Project to which this Task belongs.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTagDto"
            },
            "description": "The TaskTags that apply to this Task.",
            "nullable": true
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskAssigneeDto"
            },
            "description": "The list of assignees who are to work on this Task, if any.",
            "nullable": true
          },
          "todos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTodoDto"
            },
            "description": "A list of TaskTodo items, which are sub-tasks within this Task.",
            "nullable": true
          },
          "shortId": {
            "type": "string",
            "description": "A short ID that can be used to refer to this Task.  This short ID is\r\nguaranteed to be unique within your Workspace.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The common name of this Task.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the work to be performed in this Task.",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatusDto"
              }
            ],
            "description": "The TaskStatus assigned to this Task.",
            "nullable": true
          },
          "priorityId": {
            "type": "integer",
            "description": "The unique identifier of the TaskPriority",
            "format": "int32"
          },
          "plannedStartDate": {
            "type": "string",
            "description": "The date when work on this Task is planned to begin.",
            "format": "date"
          },
          "plannedFinishDate": {
            "type": "string",
            "description": "The date when work on this Task is expected to complete.",
            "format": "date",
            "nullable": true
          },
          "actualStartDate": {
            "type": "string",
            "description": "If set, this is the actual date when work began on the Task.",
            "format": "date",
            "nullable": true
          },
          "actualFinishDate": {
            "type": "string",
            "description": "If set, this is the actual date when work was completed on this Task.",
            "format": "date",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "The timestamp in UTC when this Task was most recently modified.",
            "format": "date-time"
          },
          "createDate": {
            "type": "string",
            "description": "The timestamp in UTC when this Task was created.",
            "format": "date-time"
          },
          "percentComplete": {
            "type": "integer",
            "description": "The numerical percentage, from 0-100, representing the percentage completion\r\nfor this Task.  Any numbers below zero or above 100 will be clamped to the\r\nminimum or maximum value.\r\n            \r\nThis value can be edited manually in the Gantt chart view of the application,\r\nor can be selected on the Task Detail page within the Kanban board.",
            "format": "int32"
          },
          "isSummary": {
            "type": "boolean",
            "description": "True if this Task is the parent of multiple Tasks underneath it.  A parent Task\r\nis a \"rolled-up\" view of multiple children that allows you to view a section of\r\nwork at a glance.\r\n            \r\nYou can create a summary Task in the Gantt chart view of the application by\r\nadding child tasks underneath a parent Task."
          }
        },
        "additionalProperties": false,
        "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
      },
      "TaskDetailsDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskDetailsDto"
              }
            ],
            "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Task.",
            "format": "uuid"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskProjectDto"
              }
            ],
            "description": "The Project to which this Task belongs.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The unique identifier of the Project to which this Task belongs.",
            "format": "uuid"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskAssigneeDto"
            },
            "description": "The list of assignees who are to work on this Task, if any.",
            "nullable": true
          },
          "shortId": {
            "type": "string",
            "description": "A short ID that can be used to refer to this Task.  This short ID is\r\nguaranteed to be unique within your Workspace.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The common name of this Task.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the work to be performed in this Task.",
            "nullable": true
          },
          "plannedStartDate": {
            "type": "string",
            "description": "The date when work on this Task is planned to begin.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date"
          },
          "plannedFinishDate": {
            "type": "string",
            "description": "The date when work on this Task is expected to complete.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "actualStartDate": {
            "type": "string",
            "description": "If set, this is the actual date when work began on the Task.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "actualFinishDate": {
            "type": "string",
            "description": "If set, this is the actual date when work was completed on this Task.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "modifyDate": {
            "type": "string",
            "description": "The timestamp in UTC when this Task was most recently modified.",
            "format": "date-time"
          },
          "createDate": {
            "type": "string",
            "description": "The timestamp in UTC when this Task was created.",
            "format": "date-time"
          },
          "percentComplete": {
            "type": "integer",
            "description": "The numerical percentage, from 0-100, representing the percentage completion\r\nfor this Task.  Any numbers below zero or above 100 will be clamped to the\r\nminimum or maximum value.\r\n            \r\nThis value can be edited manually in the Gantt chart view of the application,\r\nor can be selected on the Task Detail page within the Kanban board.",
            "format": "int32"
          },
          "isSummary": {
            "type": "boolean",
            "description": "True if this Task is the parent of multiple Tasks underneath it.  A parent Task\r\nis a \"rolled-up\" view of multiple children that allows you to view a section of\r\nwork at a glance.\r\n            \r\nYou can create a summary Task in the Gantt chart view of the application by\r\nadding child tasks underneath a parent Task."
          }
        },
        "additionalProperties": false,
        "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
      },
      "TaskDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskFieldsValueResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskField.",
            "format": "uuid"
          },
          "value": {
            "type": "string",
            "description": "The value currently set for this TaskField for this Task.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of this TaskField.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of this TaskField.  Valid types are the following:\r\n* Text\r\n* Number\r\n* Date\r\n* Checkbox\r\n* Currency\r\n* Dropdown",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project."
      },
      "TaskFieldsValueResponseDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskFieldsValueResponseDto"
              }
            ],
            "description": "A TaskField is a custom field defined within your Workspace for a specific Project.  You can\r\ndefine TaskFields for any integration purpose that is important to your business.  Each\r\nTaskField has a data type as well as options in how it is handled.  TaskFields can be edited\r\nfor each Task inside this Project.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskFieldsValueResponseDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskFieldsValueResponseDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskPriorityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of this TaskPriority.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of this TaskPriority.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskPriority is a named priority level used by your business to determine how to decide\r\nwhich Tasks are the most important.  You can name your TaskPriority levels anything you like\r\nand you can reorganize the order of the TaskPriority levels at any time."
      },
      "TaskPriorityDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskPriorityDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskProjectDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this Project.",
            "format": "uuid"
          },
          "shortId": {
            "type": "string",
            "description": "The ShortId of this Project.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The common name of this Project.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Project is a collection of Tasks that contributes towards a goal.  Within a Project, Tasks\r\nrepresent individual items of work that team members must complete.  The sum total of Tasks\r\nwithin a Project represents the work to be completed for that Project."
      },
      "TaskStatusCreateDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskStatus.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of this TaskStatus."
          },
          "order": {
            "type": "integer",
            "description": "A numerical value that can be used to sort TaskStatus values according to the\r\nneeds of your business.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
      },
      "TaskStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskStatus.",
            "format": "uuid"
          },
          "projectId": {
            "type": "string",
            "description": "The unique identifier of the Project to which this TaskStatus belongs.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of this TaskStatus.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "A numerical value that can be used to sort TaskStatus values according to the\r\nneeds of your business.",
            "format": "int32"
          },
          "isDone": {
            "type": "boolean",
            "description": "True if a Task in this TaskStatus is considered done."
          }
        },
        "additionalProperties": false,
        "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done."
      },
      "TaskStatusDtoAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatusDto"
              }
            ],
            "description": "A TaskStatus is a named status level used by your business to determine how to measure the\r\nprogress of Tasks.  You can define your own named status levels that are appropriate for\r\nyour business and determine which status levels are considered done.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskStatusDtoListAstroResult": {
        "type": "object",
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AstroError"
              }
            ],
            "description": "If the API call failed, this will contain information about the error that occurred.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "True if the API call succeeded; false otherwise.",
            "readOnly": true
          },
          "hasError": {
            "type": "boolean",
            "description": "True if the API call failed.",
            "readOnly": true
          },
          "statusCode": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatusCode"
              }
            ],
            "description": "The HTTP code of the response."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStatusDto"
            },
            "description": "If the API call succeeded, this will contain the results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An API result that contains different values depending on whether the API call succeeded or failed.\r\nIf the API call succeeded, the `Success` value will be true and you can use the `Data` element.\r\nIf the API call failed, `Success` will be false and the `Error` value will be non-null."
      },
      "TaskTagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskTag.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The common name of this TaskTag.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The color that will be used to represent this Tag visually.  This color\r\nis automatically chosen by the application when a user creates a Tag.\r\n            \r\nYou can choose specify any color that can be represented using HTML RGB\r\nsyntax such as `#0088FF`, in the format `RRGGBB`.  You may not use names\r\nfor colors.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A TaskTag is a connection between a Task and a Tag.  Each Task can have zero, one or many\r\nTaskTags associated with it.  TaskTags can be assigned and removed from the Task to help you\r\nclassify your Tasks and prioritize work."
      },
      "TaskTodoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of this TaskTodo.",
            "format": "uuid"
          },
          "text": {
            "type": "string",
            "description": "The full description of this TaskTodo.",
            "nullable": true
          },
          "complete": {
            "type": "boolean",
            "description": "True if this TaskTodo is complete."
          },
          "createDate": {
            "type": "string",
            "description": "The timestamp in UTC when this object was created.",
            "format": "date-time"
          },
          "modifyDate": {
            "type": "string",
            "description": "The timestamp in UTC when this object was last modified.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A TaskTodo is a sub-task that represents a unit of work on the Task.  You can use\r\nTaskTodo to represent individual items for a larger piece of work."
      },
      "TaskUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The common name of this Task.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the work to be performed in this Task.",
            "nullable": true
          },
          "percentComplete": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The numerical percentage, from 0-100, representing the percentage completion\r\nfor this Task.  Any numbers below zero or above 100 will be clamped to the\r\nminimum or maximum value.\r\n            \r\nThis value can be edited manually in the Gantt chart view of the application,\r\nor can be selected on the Task Detail page within the Kanban board.",
            "format": "int32",
            "nullable": true
          },
          "statusId": {
            "type": "string",
            "description": "The TaskStatus assigned to this Task.",
            "format": "uuid",
            "nullable": true
          },
          "priorityId": {
            "type": "integer",
            "description": "The unique identifier of the TaskPriority",
            "format": "int32",
            "nullable": true
          },
          "plannedStartDate": {
            "type": "string",
            "description": "The date when work on this Task is planned to begin.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "plannedFinishDate": {
            "type": "string",
            "description": "The date when work on this Task is expected to complete.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "plannedDuration": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The planned duration (in minutes) for this Task.  Cannot be negative.",
            "format": "int32",
            "nullable": true
          },
          "plannedEffort": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The planned effort (in minutes) for this Task.  Cannot be negative.",
            "format": "int32",
            "nullable": true
          },
          "plannedCost": {
            "minimum": 0,
            "type": "number",
            "description": "The planned cost for this Task.  Cannot be negative.",
            "format": "double",
            "nullable": true
          },
          "actualStartDate": {
            "type": "string",
            "description": "If set, this is the actual date when work began on the Task.\r\n            \r\nThis value contains only the date in year-month-day format.  For display, this\r\ndate will always be shown as this same year-month-day regardless of time zone.\r\nFor reporting purposes, this date is calculated against the official time zone\r\nof the Workspace.\r\n            \r\nFor example: A Task has a planned completion date of July 5, 2023 in a Workspace\r\nthat has a time zone of US Pacific Time (GMT-7 or GMT-8, depending on daylight\r\nsavings time).  This project is considered overdue on 12:01 AM July 6th 2023 in\r\nUS Pacific time.",
            "format": "date",
            "nullable": true
          },
          "actualCost": {
            "minimum": 0,
            "type": "number",
            "description": "If set, this represents the actual tracked cost for this Task.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Task is an individual element of work that must be performed to complete a Project.  A\r\nTask can have one or more Resources assigned to it.  Tasks can be linked to other Tasks to\r\nindicate whether they have a dependency or a connection."
      },
      "UpdateProjectFieldValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The new value to be set for this ProjectField.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A model that contains a new value to be set for a ProjectField."
      },
      "UpdateTaskFieldValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The new value to be set for this TaskField.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A model that contains a new value to be set for a TaskField."
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://testidentity.pmcom.io/authorize",
            "tokenUrl": "https://testidentity.pmcom.io/oauth/token",
            "scopes": {
              "all": "Gives access to all endpoints"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "all"
      ]
    }
  ]
}
